import React, { useState, useEffect } from 'react';
import {
  Container,
  Paper,
  Typography,
  Button,
  Box,
  Card,
  CardContent,
  Alert,
  Chip
} from '@mui/material';
import {
  TableChart as ExcelIcon,
  PictureAsPdf as PdfIcon,
  CheckCircle as CheckIcon
} from '@mui/icons-material';
import { ExportService } from '../services/ExportService';
import { useApi } from '../services/ApiService';

const ExportTestPage: React.FC = () => {
  const [exportStatus, setExportStatus] = useState<string>('');
  const { workers, absences, leaves } = useApi();

  // ุจูุงูุงุช ุชุฌุฑูุจูุฉ ููุงุฎุชุจุงุฑ
  const testData = [
    { id: 1, name: 'ุฃุญูุฏ ูุญูุฏ', job_title: 'ูููุฏุณ', salary: 3000 },
    { id: 2, name: 'ูุงุทูุฉ ุนูู', job_title: 'ูุญุงุณุจุฉ', salary: 2500 },
    { id: 3, name: 'ุณุงุฑุฉ ุฃุญูุฏ', job_title: 'ูุณุงุนุฏุฉ ุฅุฏุงุฑูุฉ', salary: 2000 },
  ];

  // ุฌูุจ ุงูุจูุงูุงุช ุงูุญููููุฉ
  const fetchRealData = async () => {
    try {
      await Promise.all([
        workers.getAll(),
        absences.getAll(), 
        leaves.getAll()
      ]);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    fetchRealData();
  }, []);

  // ุงูุชุนุฑููุงุช ููุฃุนูุฏุฉ
  const workersColumns = [
    { key: 'id', label: 'ุงูุฑูู' },
    { key: 'name', label: 'ุงุณู ุงูุนุงูู' },
    { key: 'civil_id', label: 'ุงูุฑูู ุงููุฏูู' },
    { key: 'nationality', label: 'ุงูุฌูุณูุฉ' },
    { key: 'job_title', label: 'ุงููุณูู ุงููุธููู' },
    { key: 'salary', label: 'ุงูุฑุงุชุจ', format: (value: number) => `${value} ุฏ.ู` },
    { key: 'hire_date', label: 'ุชุงุฑูุฎ ุงูุชุนููู' },
    { key: 'phone', label: 'ุฑูู ุงููุงุชู' }
  ];

  // ูุธุงุฆู ุงูุชุตุฏูุฑ ุงูุนุงูุฉ ููุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ
  const handleExportExcel = async () => {
    try {
      await ExportService.exportToExcel(testData, workersColumns, {
        format: 'excel',
        filename: `test_data_${new Date().toISOString().split('T')[0]}.xlsx`,
        title: 'ุจูุงูุงุช ุชุฌุฑูุจูุฉ',
        includeDate: true,
        includeStats: true
      });
      setExportStatus(`โ ุชู ุชุตุฏูุฑ ${testData.length} ุณุฌู ุฅูู Excel ุจูุฌุงุญ!`);
    } catch (error) {
      setExportStatus(`โ ุฎุทุฃ ูู ุชุตุฏูุฑ Excel: ${error}`);
    }
  };

  const handleExportPDF = async () => {
    try {
      await ExportService.exportToPDF(testData, workersColumns, {
        format: 'pdf',
        filename: `test_data_${new Date().toISOString().split('T')[0]}.pdf`,
        title: 'ุชูุฑูุฑ ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ',
        includeDate: true,
        includeStats: true,
        rtl: true
      });
      setExportStatus(`โ ุชู ุชุตุฏูุฑ ${testData.length} ุณุฌู ุฅูู PDF ุจูุฌุงุญ!`);
    } catch (error) {
      setExportStatus(`โ ุฎุทุฃ ูู ุชุตุฏูุฑ PDF: ${error}`);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Paper sx={{ p: 3 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          ๐งช ุงุฎุชุจุงุฑ ููุฒุงุช ุงูุชุตุฏูุฑ
        </Typography>
        
        <Typography variant="body1" color="text.secondary" paragraph>
          ูุฐู ุงูุตูุญุฉ ูุงุฎุชุจุงุฑ ููุฒุงุช ุชุตุฏูุฑ ุงูุจูุงูุงุช ุฅูู Excel ู PDF
        </Typography>

        {exportStatus && (
          <Alert 
            severity={exportStatus.includes('ุฎุทุฃ') ? 'error' : 'success'} 
            sx={{ mb: 3 }}
            onClose={() => setExportStatus('')}
          >
            {exportStatus}
          </Alert>
        )}

        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', gap: '24px' }}>
          {/* ุจูุงูุงุช ุงูุงุฎุชุจุงุฑ */}
          <div>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ๐ ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ
                </Typography>
                
                <Box sx={{ mb: 2 }}>
                  <Chip 
                    icon={<CheckIcon />}
                    label={`${testData.length} ุณุฌู`} 
                    color="primary" 
                    size="small"
                  />
                </Box>

                <Box sx={{ maxHeight: 300, overflow: 'auto' }}>
                  {testData.map((worker, index) => (
                    <Box key={worker.id} sx={{ 
                      p: 1, 
                      border: '1px solid #e0e0e0', 
                      borderRadius: 1, 
                      mb: 1,
                      backgroundColor: index % 2 === 0 ? '#f9f9f9' : 'white'
                    }}>
                      <Typography variant="body2" fontWeight="bold">
                        {worker.name}
                      </Typography>
                      <Typography variant="caption" color="text.secondary">
                        {worker.job_title} - {worker.salary} ุฑูุงู
                      </Typography>
                    </Box>
                  ))}
                </Box>
              </CardContent>
            </Card>
          </div>

          {/* ุฃุฒุฑุงุฑ ุงูุชุตุฏูุฑ */}
          <div>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ๐ค ุฎูุงุฑุงุช ุงูุชุตุฏูุฑ
                </Typography>
                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>
                  <Button
                    variant="contained"
                    color="success"
                    size="large"
                    startIcon={<ExcelIcon />}
                    onClick={handleExportExcel}
                    fullWidth
                  >
                    ุชุตุฏูุฑ ุฅูู Excel
                  </Button>

                  <Button
                    variant="contained"
                    color="error"
                    size="large"
                    startIcon={<PdfIcon />}
                    onClick={handleExportPDF}
                    fullWidth
                  >
                    ุชุตุฏูุฑ ุฅูู PDF
                  </Button>

                  <Box sx={{ mt: 2, p: 2, backgroundColor: '#f5f5f5', borderRadius: 1 }}>
                    <Typography variant="caption" color="text.secondary">
                      ๐ก ููุงุญุธุฉ: ุงููููุงุช ุณูุชู ุชุญููููุง ุชููุงุฆูุงู ูู ูุฌูุฏ ุงูุชุญูููุงุช
                    </Typography>
                  </Box>
                </Box>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* ูุนูููุงุช ุงูุชุตุฏูุฑ */}
        <Box sx={{ mt: 3 }}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                โน๏ธ ูุนูููุงุช ุงูุชุตุฏูุฑ
              </Typography>
              
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '16px' }}>
                <div>
                  <Typography variant="subtitle2" gutterBottom>
                    ููุฒุงุช Excel:
                  </Typography>
                  <ul>
                    <li>ุชูุณูู ุงูุจูุงูุงุช ุจุงูุนุฑุจูุฉ</li>
                    <li>ุฅุถุงูุฉ ุนููุงู ูุชุงุฑูุฎ</li>
                    <li>ุชูุณูู ุงูุฃุนูุฏุฉ ูุงูููู</li>
                    <li>ุฅุญุตุงุฆูุงุช ุฅุถุงููุฉ</li>
                  </ul>
                </div>
                
                <div>
                  <Typography variant="subtitle2" gutterBottom>
                    ููุฒุงุช PDF:
                  </Typography>
                  <ul>
                    <li>ุฌุฏุงูู ููุณูุฉ</li>
                    <li>ุฏุนู ุงููุตูุต ุงูุนุฑุจูุฉ</li>
                    <li>ุชุฎุทูุท ุงุญุชุฑุงูู</li>
                    <li>ุฑุฃุณ ูุชุฐููู ุงูุตูุญุฉ</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </Box>
      </Paper>
    </Container>
  );
};

export default ExportTestPage;
